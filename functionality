
# `int()` Function

# The `int()` function in Python converts a value into an integer. This includes converting strings, floats,
# and other numeric types. Here are a few examples:

# 1. **Converting a Float to an Integer**:
#    ```python
#    num = 3.14
#    result = int(num)  # result will be 3
#    ```

# 2. **Converting a String to an Integer**:
#    ```python
#    str_num = "42"
#    result = int(str_num)  # result will be 42
#    ```

# 3. **Converting a String in a Specific Base**:
#    You can specify a base for conversion. For example, to convert a binary string to an integer:
#    ```python
#    binary_str = "1010"
#    result = int(binary_str, 2)  # result will be 10
#    ```

# 4. **Handling Non-Numeric Strings**:
#    If you try to convert a non-numeric string, a `ValueError` will be raised:
#    ```python
#    invalid_str = "abc"
#    result = int(invalid_str)  # This will raise ValueError
#    ```

# ---

# ### Binary to Decimal Conversion Example

# Let’s convert the binary number `1101` to decimal:

# 1. **Identify Positions and Powers of 2**:
#    - Starting from the right:
#      - 1 (rightmost) → \(2^0\) = 1
#      - 0 → \(2^1\) = 0
#      - 1 → \(2^2\) = 4
#      - 1 (leftmost) → \(2^3\) = 8

# 2. **Calculate the Decimal Value**:
#    Combine the values:
#    \[
#    (1 \times 8) + (0 \times 4) + (1 \times 2) + (1 \times 1) = 8 + 0 + 2 + 1 = 11
#    \]

# ### Result
# - The binary number `1101` is equal to the decimal number `13`.

# ### Python Code Example
# Here’s how you can see this in action in Python:
# ```python
# binary_str = "1101"
# result = int(binary_str, 2)
# print(result)  # Output will be 13
# ```

# ---

# ### Understanding \(2^0 = 1\)

# The expression \(2^0 = 1\) is a fundamental rule in mathematics regarding exponents. Here’s why:

# 1. **Definition of Exponents**:
#    An exponent indicates how many times a base (here, 2) is multiplied by itself:
#    - \(2^3 = 2 \times 2 \times 2 = 8\)
#    - \(2^2 = 2 \times 2 = 4\)
#    - \(2^1 = 2\)

# 2. **The Pattern**:
#    Observing the pattern of exponents:
#    - \(2^3 = 8\)
#    - \(2^2 = 4\)
#    - \(2^1 = 2\)
#    - \(2^0 = ?\)

# 3. **Dividing by the Base**:
#    To find \(2^0\), consider:
#    \[
#    2^1 = 2
#    \]
#    Dividing by the base:
#    \[
#    2^1 / 2 = 2^0
#    \]
#    This simplifies to:
#    \[
#    2 / 2 = 1 \quad \Rightarrow \quad 2^0 = 1
#    \]

# ### General Rule
# For any non-zero number \(a\):
# \[
# a^0 = 1
# \]

# ### Conclusion
# Thus, \(2^0\) equals \(1\) due to the properties of exponents.

# ---

# ### Understanding String vs. Binary Interpretation

# In programming, a value like `"1010"` is treated as a string by default because it is enclosed in quotation marks.
# However, when explicitly converted to a binary number using the `int()` function, the string is interpreted as a number.

# 1. **String vs. Integer**:
#    - **String**: `"1010"` is a sequence of characters and has no numeric value until converted.
#    - **Binary Number**: The binary number `1010` represents a value in base 2.

# 2. **Conversion**:
#    When using `int("1010", 2)`, you're instructing the computer to convert the string from base 2 to a decimal integer.

# 3. **Example in Python**:
#    ```python
#    binary_str = "1010"  # This is a string
#    decimal_value = int(binary_str, 2)  # Converts to integer (10 in decimal)
#    ```

# 4. **Why the Interpretation**:
#    Computers rely on programmer instructions to determine how to interpret data.
#    Strings remain strings until a specific function indicates they should be treated as numbers.

# Conclusion
# Without explicit conversion, `"1010"` is simply a string.
# Only when you instruct the computer to treat it as a binary number does it perform the conversion.
